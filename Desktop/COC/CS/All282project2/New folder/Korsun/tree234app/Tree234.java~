/*
 * Andriy Korsun
 * Professor Ferguson
 * Comp Sci 282, Project 2
 * 11/10/2015
 */
package tree234app;

////////////////////////////////////////////////////////////////

class Tree234

   {

   protected Node root = new Node();            // make root node

// -------------------------------------------------------------

   public int find(long key)

      {

      Node curNode = root;

      int childNumber;

      while(true)

         {

         if(( childNumber=curNode.findItem(key) ) != -1)

            return childNumber;               // found it

         else if( curNode.isLeaf() )

            return -1;                        // can't find it

         else                                 // search deeper

            curNode = getNextChild(curNode, key);

         }  // end while

      }



   public void insert(long dValue)

      {

      Node curNode = root;

      DataItem tempItem = new DataItem(dValue);



      while(true)

         {

         if( curNode.isFull() )              

            {

            split(curNode);                  

            curNode = curNode.getParent();    

                                             

            curNode = getNextChild(curNode, dValue);

            }  



         else if( curNode.isLeaf() )          // if node is leaf,

            break;                            // go insert

        

         else

            curNode = getNextChild(curNode, dValue);

         }  // end while



      curNode.insertItem(tempItem);       
      }  

   protected void split(Node thisNode)     // split the node

      {

      // assumes node is full

      DataItem itemB, itemC;

      Node parent, child2, child3;

      int itemIndex;



      itemC = thisNode.removeItem();   

      itemB = thisNode.removeItem();    

      child2 = thisNode.disconnectChild(2); 

      child3 = thisNode.disconnectChild(3); 



      Node newRight = new Node();       



      if(thisNode==root)               

         {

         root = new Node();                

         parent = root;                   

         root.connectChild(0, thisNode);   

         }

      else                              

         parent = thisNode.getParent();    



      

      itemIndex = parent.insertItem(itemB); 

      int n = parent.getNumItems();         



      for(int j=n-1; j>itemIndex; j--)         

         {                                      

         Node temp = parent.disconnectChild(j); 

         parent.connectChild(j+1, temp);        

         }

                                   

      parent.connectChild(itemIndex+1, newRight);



     

      newRight.insertItem(itemC);       

      newRight.connectChild(0, child2); 

      newRight.connectChild(1, child3); 

      }  

   public Node getNextChild(Node theNode, long theValue)

      {

      int j;

      

      int numItems = theNode.getNumItems();

      for(j=0; j<numItems; j++)          
         {                               

         if( theValue < theNode.getItem(j).dData )

            return theNode.getChild(j);  

         } 

      return theNode.getChild(j);       

      }

// -------------------------------------------------------------

   public void displayTree()

      {

      recDisplayTree(root, 0, 0);

      }

// -------------------------------------------------------------

   private void recDisplayTree(Node thisNode, int level,

                                              int childNumber)

      {

      System.out.print("level="+level+" child="+childNumber+" ");

      thisNode.displayNode();               // display this node



      // call ourselves for each child of this node

      int numItems = thisNode.getNumItems();

      for(int j=0; j<numItems+1; j++)

         {

         Node nextNode = thisNode.getChild(j);

         if(nextNode != null)

            recDisplayTree(nextNode, level+1, j);

         else

            return;

         }

      }  // end recDisplayTree()

// -------------------------------------------------------------\

   }  // end class Tree234
